generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.VarChar(255)
  legacyId       String?   @unique @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastActivityAt DateTime?

  displayName          String      @db.VarChar(255)
  email                String      @unique @db.VarChar(255)
  groups               UserGroup[]
  isDisabled           Boolean     @default(false)
  shouldChangePassword Boolean     @default(true)

  draft               AnimalDraft?  @relation("Draft_ownerToUser")
  draftManagedAnimals AnimalDraft[] @relation("Draft_managerToUser")
  managedAnimals      Animal[]
  password            Password?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model FosterFamily {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments              String?
  displayName           String    @db.VarChar(255)
  email                 String    @unique @db.VarChar(255)
  phone                 String    @db.VarChar(255)
  speciesAlreadyPresent Species[] @default([])
  speciesToHost         Species[] @default([])

  address String @db.VarChar(255)
  city    String @db.VarChar(255)
  zipCode String @db.VarChar(255)

  draftFosterAnimals AnimalDraft[]
  fosterAnimals      Animal[]
}

model Breed {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String  @db.VarChar(255)
  species Species

  animals      Animal[]
  draftAnimals AnimalDraft[]

  @@unique([name, species])
  @@index([species])
}

model Color {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique @db.VarChar(255)

  animals      Animal[]
  draftAnimals AnimalDraft[]
}

model Animal {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adoptionDate             DateTime?
  adoptionOption           AdoptionOption?
  alias                    String?         @db.VarChar(255)
  avatar                   String
  birthdate                DateTime
  breed                    Breed?          @relation(fields: [breedId], references: [id], onDelete: Restrict)
  breedId                  String?
  color                    Color?          @relation(fields: [colorId], references: [id], onDelete: Restrict)
  colorId                  String?
  comments                 String?
  description              String?
  fosterFamily             FosterFamily?   @relation(fields: [fosterFamilyId], references: [id], onDelete: Restrict)
  fosterFamilyId           String?
  gender                   Gender
  iCadNumber               String?
  isOkCats                 Boolean?
  isOkChildren             Boolean?
  isOkDogs                 Boolean?
  isSterilizationMandatory Boolean         @default(true)
  isSterilized             Boolean
  manager                  User?           @relation(fields: [managerId], references: [id], onDelete: Restrict)
  managerId                String?
  name                     String          @db.VarChar(255)
  nextVaccinationDate      DateTime?
  pickUpDate               DateTime
  pickUpLocation           String?
  pickUpReason             PickUpReason    @default(OTHER)
  pictures                 String[]
  species                  Species
  status                   Status

  @@index([species])
  @@index([status])
  @@index([managerId])
  @@index([status, species])
  @@index([status, managerId])
}

model AnimalDraft {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adoptionDate             DateTime?
  adoptionOption           AdoptionOption?
  alias                    String?         @db.VarChar(255)
  birthdate                DateTime?
  breed                    Breed?          @relation(fields: [breedId], references: [id])
  breedId                  String?
  color                    Color?          @relation(fields: [colorId], references: [id])
  colorId                  String?
  comments                 String?
  description              String?
  fosterFamily             FosterFamily?   @relation(fields: [fosterFamilyId], references: [id])
  fosterFamilyId           String?
  gender                   Gender?
  iCadNumber               String?
  isOkCats                 Boolean?
  isOkChildren             Boolean?
  isOkDogs                 Boolean?
  isSterilizationMandatory Boolean?
  isSterilized             Boolean?
  manager                  User?           @relation("Draft_managerToUser", fields: [managerId], references: [id])
  managerId                String?
  name                     String?         @db.VarChar(255)
  nextVaccinationDate      DateTime?
  owner                    User            @relation("Draft_ownerToUser", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                  String          @unique
  pickUpDate               DateTime?
  pickUpLocation           String?
  pickUpReason             PickUpReason?
  species                  Species?
  status                   Status?
}

model Event {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category    EventCategory
  description String
  endDate     DateTime
  image       String?
  isFullDay   Boolean       @default(false)
  isVisible   Boolean       @default(false)
  location    String
  startDate   DateTime
  title       String        @db.VarChar(255)
  url         String?
}

enum UserGroup {
  ADMIN
  ANIMAL_MANAGER
  BLOGGER
  HEAD_OF_PARTNERSHIPS
  VETERINARIAN
  VOLUNTEER
}

enum Species {
  BIRD
  CAT
  DOG
  REPTILE
  RODENT
}

enum Gender {
  FEMALE
  MALE
}

enum PickUpReason {
  ABANDONMENT
  DECEASED_MASTER
  MISTREATMENT
  STRAY_ANIMAL
  OTHER
}

enum Status {
  ADOPTED
  DECEASED
  FREE
  LOST
  OPEN_TO_ADOPTION
  OPEN_TO_RESERVATION
  RESERVED
  UNAVAILABLE
  RETIRED
}

enum AdoptionOption {
  FREE_DONATION
  UNKNOWN
  WITH_STERILIZATION
  WITHOUT_STERILIZATION
}

enum AnimalAge {
  ADULT
  JUNIOR
  SENIOR
}

enum EventCategory {
  ATHLETIC
  BIRTHDAY
  COLLECTION
  FORUM
  SENSITIZATION
  SHOW
}
