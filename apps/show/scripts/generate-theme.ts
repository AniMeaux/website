import { mkdir, writeFile } from "node:fs/promises";
import { dirname, resolve } from "node:path";
import { fileURLToPath } from "node:url";
import { colors, screens, spacing } from "../tailwind.config";
import { relativeToCwd, safelyReadFile } from "./shared";

const FILENAME = fileURLToPath(import.meta.url);
const DIRNAME = dirname(FILENAME);
const SCRIPT_NAME = relativeToCwd(FILENAME);
const DEST_DIRECTORY = resolve(DIRNAME, "../src/generated");
const DEST_FILE = resolve(DEST_DIRECTORY, "theme.ts");

console.log("Building...");

// Ensure the destination directory exists.
await mkdir(DEST_DIRECTORY, { recursive: true });

// Add here values we need in code.
// Only add what is actualy needed to keep a minimal size.
const theme = {
  screens,
  screensPx: toNumberRecord(screens),
  colors,
  spacing: toNumberRecord(spacing),
};

const content = `// This file is generated by ${SCRIPT_NAME}
export type ScreenSize = keyof typeof theme.screens;
export const theme = ${JSON.stringify(theme, null, 2)};`;

const currentContent = await safelyReadFile(DEST_FILE);
if (currentContent === content) {
  console.info(`Theme didn't change (${relativeToCwd(DEST_FILE)})`);

  // The theme will not change so we don't re-generate it to avoid triggering
  // a re-build of remix.
  process.exit(0);
}

await writeFile(DEST_FILE, content);
console.info(`Built theme (${relativeToCwd(DEST_FILE)})`);

function toNumberRecord<TObject extends Record<string, any>>(object: TObject) {
  return Object.fromEntries(
    Object.entries(object)
      .filter(([_, value]) => typeof value === "string")
      .map(([key, value]) => [key, Number(value.replace("px", ""))] as const)
      .filter(([_, value]) => !isNaN(value)),
  );
}
