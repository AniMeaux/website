generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.VarChar(255)
  legacyId       String?   @unique @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastActivityAt DateTime?

  displayName          String      @db.VarChar(255)
  email                String      @unique @db.VarChar(255)
  groups               UserGroup[]
  isDisabled           Boolean     @default(false)
  shouldChangePassword Boolean     @default(true)

  draft               AnimalDraft?  @relation("Draft_ownerToUser")
  draftManagedAnimals AnimalDraft[] @relation("Draft_managerToUser")
  managedAnimals      Animal[]
  password            Password?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model FosterFamily {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availability               FosterFamilyAvailability @default(UNKNOWN)
  availabilityExpirationDate DateTime?
  comments                   String?
  displayName                String                   @db.VarChar(255)
  email                      String                   @unique @db.VarChar(255)
  garden                     FosterFamilyGarden       @default(UNKNOWN)
  housing                    FosterFamilyHousing      @default(UNKNOWN)
  isBanned                   Boolean                  @default(false)
  phone                      String                   @db.VarChar(255)
  speciesAlreadyPresent      Species[]                @default([])
  speciesToHost              Species[]                @default([])

  address String @db.VarChar(255)
  city    String @db.VarChar(255)
  zipCode String @db.VarChar(255)

  draftFosterAnimals AnimalDraft[]
  fosterAnimals      Animal[]
}

enum FosterFamilyAvailability {
  AVAILABLE
  UNAVAILABLE
  UNKNOWN
}

enum FosterFamilyHousing {
  FLAT
  HOUSE
  OTHER
  UNKNOWN
}

enum FosterFamilyGarden {
  NO
  UNKNOWN
  YES
}

model Breed {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String  @db.VarChar(255)
  species Species

  animals      Animal[]
  draftAnimals AnimalDraft[]

  @@unique([name, species])
  @@index([species])
}

model Color {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique @db.VarChar(255)

  animals      Animal[]
  draftAnimals AnimalDraft[]
}

model Animal {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adoptionDate             DateTime?
  adoptionOption           AdoptionOption?
  alias                    String?         @db.VarChar(255)
  avatar                   String
  birthdate                DateTime
  breed                    Breed?          @relation(fields: [breedId], references: [id], onDelete: Restrict)
  breedId                  String?
  color                    Color?          @relation(fields: [colorId], references: [id], onDelete: Restrict)
  colorId                  String?
  comments                 String?
  description              String?
  diagnosis                Diagnosis       @default(UNKNOWN)
  fosterFamily             FosterFamily?   @relation(fields: [fosterFamilyId], references: [id], onDelete: Restrict)
  fosterFamilyId           String?
  gender                   Gender
  iCadNumber               String?
  isOkCats                 Boolean?
  isOkChildren             Boolean?
  isOkDogs                 Boolean?
  isSterilizationMandatory Boolean         @default(true)
  isSterilized             Boolean
  isVaccinationMandatory   Boolean         @default(true)
  manager                  User?           @relation(fields: [managerId], references: [id], onDelete: Restrict)
  managerId                String?
  name                     String          @db.VarChar(255)
  nextVaccinationDate      DateTime?
  pickUpDate               DateTime
  pickUpLocation           String?
  pickUpReason             PickUpReason    @default(OTHER)
  pictures                 String[]
  screeningFelv            ScreeningResult @default(UNKNOWN)
  screeningFiv             ScreeningResult @default(UNKNOWN)
  species                  Species
  status                   Status

  @@index([species])
  @@index([status])
  @@index([managerId])
  @@index([status, species])
  @@index([status, managerId])
}

model AnimalDraft {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adoptionDate             DateTime?
  adoptionOption           AdoptionOption?
  alias                    String?          @db.VarChar(255)
  birthdate                DateTime?
  breed                    Breed?           @relation(fields: [breedId], references: [id])
  breedId                  String?
  color                    Color?           @relation(fields: [colorId], references: [id])
  colorId                  String?
  comments                 String?
  description              String?
  diagnosis                Diagnosis?       @default(UNKNOWN)
  fosterFamily             FosterFamily?    @relation(fields: [fosterFamilyId], references: [id])
  fosterFamilyId           String?
  gender                   Gender?
  iCadNumber               String?
  isOkCats                 Boolean?
  isOkChildren             Boolean?
  isOkDogs                 Boolean?
  isSterilizationMandatory Boolean?
  isSterilized             Boolean?
  isVaccinationMandatory   Boolean?
  manager                  User?            @relation("Draft_managerToUser", fields: [managerId], references: [id])
  managerId                String?
  name                     String?          @db.VarChar(255)
  nextVaccinationDate      DateTime?
  owner                    User             @relation("Draft_ownerToUser", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                  String           @unique
  pickUpDate               DateTime?
  pickUpLocation           String?
  pickUpReason             PickUpReason?
  screeningFelv            ScreeningResult?
  screeningFiv             ScreeningResult?
  species                  Species?
  status                   Status?
}

model Event {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  endDate     DateTime
  image       String
  isFullDay   Boolean  @default(false)
  isVisible   Boolean  @default(true)
  location    String
  startDate   DateTime
  title       String   @db.VarChar(255)
  url         String?
}

model PressArticle {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image           String?
  publicationDate DateTime
  publisherName   String   @db.VarChar(255)
  title           String   @db.VarChar(255)
  url             String   @unique
}

enum UserGroup {
  ADMIN
  ANIMAL_MANAGER
  BLOGGER
  HEAD_OF_PARTNERSHIPS
  SHOW_ORGANIZER
  VETERINARIAN
  VOLUNTEER
}

enum Species {
  BIRD
  CAT
  DOG
  REPTILE
  RODENT
}

enum Gender {
  FEMALE
  MALE
}

enum PickUpReason {
  ABANDONMENT
  BIRTH
  DECEASED_MASTER
  MISTREATMENT
  OTHER
  STRAY_ANIMAL
}

enum Status {
  ADOPTED
  DECEASED
  FREE
  LOST
  OPEN_TO_ADOPTION
  OPEN_TO_RESERVATION
  RESERVED
  RETIRED
  RETURNED
  TRANSFERRED
  UNAVAILABLE
}

enum AdoptionOption {
  FREE_DONATION
  UNKNOWN
  WITH_STERILIZATION
  WITHOUT_STERILIZATION
}

enum AnimalAge {
  ADULT
  JUNIOR
  SENIOR
}

enum ScreeningResult {
  NEGATIVE
  POSITIVE
  UNKNOWN
}

enum Diagnosis {
  CATEGORIZED
  NOT_APPLICABLE
  UNCATEGORIZED
  UNKNOWN
}

model ShowExhibitorApplication {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status         ShowExhibitorApplicationStatus @default(UNTREATED)
  refusalMessage String?

  contactLastname  String @db.VarChar(64)
  contactFirstname String @db.VarChar(64)
  contactEmail     String @unique @db.VarChar(64)
  contactPhone     String @db.VarChar(64)

  structureName             String                               @db.VarChar(64)
  structureUrl              String                               @db.VarChar(128)
  structureLegalStatus      ShowExhibitorApplicationLegalStatus?
  structureOtherLegalStatus String?                              @db.VarChar(64)
  structureSiret            String                               @db.VarChar(128)
  structureActivityTargets  ShowActivityTarget[]
  structureActivityFields   ShowActivityField[]
  structureAddress          String                               @db.VarChar(128)
  structureZipCode          String                               @db.VarChar(64)
  structureCity             String                               @db.VarChar(128)
  structureCountry          String                               @db.VarChar(64)
  structureLogoPath         String                               @db.VarChar(128)

  billingAddress String @db.VarChar(128)
  billingCity    String @db.VarChar(128)
  billingZipCode String @db.VarChar(64)
  billingCountry String @db.VarChar(64)

  desiredStandSize                ShowStandSize
  proposalForOnStageEntertainment String?       @db.VarChar(512)

  partnershipCategory      ShowPartnershipCategory?
  otherPartnershipCategory ShowExhibitorApplicationOtherPartnershipCategory?

  motivation String @db.VarChar(1000)

  discoverySource String @db.VarChar(128)

  comments String? @db.VarChar(512)

  exhibitor ShowExhibitor?
}

enum ShowExhibitorApplicationStatus {
  UNTREATED
  REFUSED
  VALIDATED
  WAITING_LIST
}

enum ShowExhibitorApplicationOtherPartnershipCategory {
  MAYBE
  NO_PARTNERSHIP
}

enum ShowExhibitorApplicationLegalStatus {
  ASSOCIATION
  SOLE_PROPRIETORSHIP
  COMPANY
}

model ShowExhibitor {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVisible Boolean  @default(false)

  // Used by exhibitors to "sign in" to their account.
  token String @unique @default(uuid()) @db.Uuid

  hasPaid Boolean @default(false)

  application   ShowExhibitorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String                   @unique @db.Uuid

  partnership ShowPartner?
  animations  ShowAnimation[]

  // -- Profile ----------------------------------------------------------------

  name String @db.VarChar(64)

  publicProfileStatus        ShowExhibitorStatus  @default(TO_BE_FILLED)
  publicProfileStatusMessage String?
  activityFields             ShowActivityField[]
  activityTargets            ShowActivityTarget[]
  links                      String[]
  logoPath                   String               @db.VarChar(128)

  descriptionStatus        ShowExhibitorStatus @default(TO_BE_FILLED)
  descriptionStatusMessage String?
  description              String?             @db.VarChar(512)

  onStandAnimationsStatus        ShowExhibitorStatus @default(TO_BE_FILLED)
  onStandAnimationsStatusMessage String?
  onStandAnimations              String?             @db.VarChar(256)

  // -- Documents --------------------------------------------------------------

  documentStatus        ShowExhibitorStatus @default(TO_BE_FILLED)
  documentStatusMessage String?

  folderId             String  @db.VarChar(128)
  identificationFileId String? @db.VarChar(128)
  insuranceFileId      String? @db.VarChar(128)
  kbisFileId           String? @db.VarChar(128)

  // -- Dogs Configuration -----------------------------------------------------

  dogsConfigurationStatus        ShowExhibitorStatus @default(TO_BE_FILLED)
  dogsConfigurationStatusMessage String?

  dogs ShowExhibitorDog[]

  // -- Stand Configuration ----------------------------------------------------

  standConfigurationStatus        ShowExhibitorStatus @default(TO_BE_FILLED)
  standConfigurationStatusMessage String?

  chairCount              Int                  @default(1)
  dividerCount            Int                  @default(0)
  dividerType             ShowDividerType?
  hasElectricalConnection Boolean              @default(false)
  hasTablecloths          Boolean              @default(true)
  installationDay         ShowInstallationDay?
  locationNumber          String?              @db.VarChar(16)
  peopleCount             Int                  @default(1)
  placementComment        String?              @db.VarChar(256)
  size                    ShowStandSize
  standNumber             String?              @db.VarChar(16)
  tableCount              Int
  zone                    ShowStandZone?
}

enum ShowExhibitorStatus {
  TO_BE_FILLED
  AWAITING_VALIDATION
  TO_MODIFY
  VALIDATED
}

enum ShowDividerType {
  GRID
  FABRIC_PANEL
  WOOD_PANEL
}

enum ShowInstallationDay {
  FRIDAY
  SATURDAY
}

model ShowExhibitorDog {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exhibitor   ShowExhibitor @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)
  exhibitorId String        @db.Uuid

  gender        Gender
  idNumber      String  @db.VarChar(64)
  isCategorized Boolean
  isSterilized  Boolean
}

model ShowProvider {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVisible Boolean  @default(false)

  logoPath String @unique @db.VarChar(128)
  name     String @unique @db.VarChar(64)
  url      String @unique @db.VarChar(128)
}

model ShowPartner {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVisible Boolean  @default(false)

  category ShowPartnershipCategory

  // Either an exhibitor...
  exhibitor   ShowExhibitor? @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)
  exhibitorId String?        @unique @db.Uuid

  // ...or a structure with these properties.
  logoPath String? @unique @db.VarChar(128)
  name     String? @unique @db.VarChar(64)
  url      String? @unique @db.VarChar(128)
}

enum ShowPartnershipCategory {
  POLLEN
  BRONZE
  SILVER
  GOLD
}

model ShowAnimation {
  id        String   @id @default(uuid()) @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVisible Boolean  @default(false)

  animators ShowExhibitor[]
  targets   ShowActivityTarget[]

  description     String        @db.VarChar(512)
  endTime         DateTime
  registrationUrl String?       @db.VarChar(128)
  startTime       DateTime
  zone            ShowStandZone
}

enum ShowStandZone {
  INSIDE
  OUTSIDE
}

enum ShowActivityField {
  ACCESSORIES
  ALTERNATIVE_MEDICINE
  ARTIST
  ASSOCIATION
  BEHAVIOR
  CARE
  CITY
  DRAWING
  EDITING
  EDUCATION
  FOOD
  PHOTOGRAPHER
  SENSITIZATION
  SERVICES
  TRAINING
}

enum ShowActivityTarget {
  CATS
  DOGS
  EQUINES
  HUMANS
  NACS
  RABBITS
  WILDLIFE
}

enum ShowStandSize {
  S_6
  S_9
  S_12
  S_18
  S_36
}
